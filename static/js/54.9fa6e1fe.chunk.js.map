{"version":3,"sources":["views/category/updateForm.js","middleware/API.js","views/components/toastify/index.js","middleware/BaseURL.js"],"names":["CategoryForm","useState","img","setImg","success","setSuccess","preview","setPreview","_id","URLSearchParams","useLocation","search","get","history","useHistory","heading","text","category","setCategory","useEffect","getSingleCate","a","Action","data","res","image","console","log","uppy","Uppy","meta","type","restrictions","maxNumberOfFiles","autoProceed","use","thumbnailGenerator","on","file","onChangeEvent","e","target","name","value","FormData","append","updateCategory","preventDefault","put","toast","title","setTimeout","push","message","error","tag","sm","for","className","FormGroup","addonType","size","id","onChange","placeholder","md","src","BaseURL","alt","Ripple","color","onClick","axios","create","baseURL","SuccessToast","props","icon","role","ErrorToast"],"mappings":"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","file":"static/js/54.9fa6e1fe.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Uppy from '@uppy/core'\r\nimport thumbnailGenerator from '@uppy/thumbnail-generator'\r\nimport { DragDrop } from '@uppy/react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport '../../@core/scss/react/libs/editor/editor.scss'\r\nimport '../../@core/scss/react/libs/file-uploader/file-uploader.scss'\r\nimport 'uppy/dist/uppy.css'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardTitle,\r\n  CardBody,\r\n  FormGroup,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Form,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n  InputGroupText,\r\n  InputGroupAddon,\r\n  Spinner\r\n} from 'reactstrap'\r\nimport { FaPencilAlt, FaTextHeight } from 'react-icons/fa'\r\nimport Action from '../../middleware/API'\r\nimport BaseURL from '../../middleware/BaseURL'\r\nconst CategoryForm = () => {\r\n  //  file Uploader\r\n  const [img, setImg] = useState(null)\r\n  const [success, setSuccess] = useState(false)\r\n  const [preview, setPreview] = useState(null)\r\n  //getting id from url\r\n  const _id = new URLSearchParams(useLocation().search).get('_id')\r\n\r\n  //for updating the route\r\n  const history = useHistory()\r\n\r\n  const [category, setCategory] = useState({\r\n    heading: '',\r\n    text: ''\r\n\r\n  })\r\n\r\n  useEffect(() => {\r\n    //getting the selected category\r\n    const getSingleCate = async () => {\r\n      try {\r\n        const { data } = await Action.get(`/category?_id=${ _id }`)\r\n        const res = (data.data[0])\r\n        // setting up the intial images and textes\r\n        setImg(res.image)\r\n        setCategory({\r\n          heading: res.heading,\r\n          text: res.text\r\n        })\r\n\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    }\r\n    getSingleCate()\r\n  }, [])\r\n\r\n  const uppy = new Uppy({\r\n    meta: { type: 'avatar' },\r\n    restrictions: { maxNumberOfFiles: 1 },\r\n    autoProceed: true\r\n  })\r\n\r\n  uppy.use(thumbnailGenerator)\r\n\r\n  uppy.on('thumbnail:generated', (file, preview) => {\r\n    setImg(file.data)\r\n    setPreview(preview)\r\n  })\r\n  const onChangeEvent = (e) => {\r\n    const { name, value } = e.target\r\n    setCategory(e => {\r\n      return {\r\n        ...e,\r\n        [name]: value\r\n      }\r\n    })\r\n  }\r\n  //combinin all data\r\n  const data = new FormData()\r\n  data.append('heading', category.heading)\r\n  data.append('text', category.text)\r\n  data.append('file', img)\r\n  //put api\r\n  const updateCategory = async (e) => {\r\n    e.preventDefault()\r\n    const res = await Action.put(`/category/${ _id }`, data, {})\r\n    console.log(res)\r\n    if (res.data.success) {\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Category updated Successfully!\" />)\r\n      setSuccess(true)\r\n      setTimeout(() => {\r\n        history.push('/category/list')\r\n      }, 1000)\r\n    } else {\r\n      console.log(res.data.message)\r\n      setSuccess(false)\r\n      toast.error(<ErrorToast title=\"error\" text={ res.data.message } />)\r\n    }\r\n\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>Edit the Category</CardTitle>\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Form>\r\n          <Row>\r\n            <Col sm='12'>\r\n              {/* category form */ }\r\n              <Label for='name'>Category Name</Label>\r\n              <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                <InputGroupAddon addonType='prepend'>\r\n                  <InputGroupText>\r\n                    <FaPencilAlt size={ 15 } />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input type='text' name='heading' value={ category.heading } id='name'\r\n                  onChange={ onChangeEvent }\r\n                  placeholder='Enter Category Name' />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col sm='12' md=\"6\">\r\n              {/* category form */ }\r\n              <Label for='descrip'>Category Description</Label>\r\n              <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                <InputGroupAddon addonType='prepend'>\r\n                  <InputGroupText>\r\n                    <FaTextHeight size={ 15 } />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input type='text' name='text' id='descrip' value={ category.text } placeholder='Enter Your Category description'\r\n                  onChange={ onChangeEvent } />\r\n              </InputGroup>\r\n            </Col>\r\n\r\n            {/* basic image upload */ }\r\n\r\n            {/* <Col md='6' sm='12'>\r\n              <FormGroup>\r\n                <Label for='exampleCustomFileBrowser'>Category icon</Label>\r\n                <CustomInput type='file' id='exampleCustomFileBrowser' onChange={ (e) => {\r\n                  setIcon(e.target.files[0].name)\r\n                } } name='customFile' />\r\n              </FormGroup>\r\n            </Col> */}\r\n\r\n            <Col sm='12' className=\"mt-2\">\r\n              {/* basic image upload */ }\r\n\r\n              <h6> Category Image </h6>\r\n              <DragDrop uppy={ uppy } />\r\n              { img !== null ? <img className='rounded mt-2' src={ preview ? preview : BaseURL + img } alt='avatar' /> : null }\r\n            </Col>\r\n\r\n            <Col sm='12' className=\"mt-4\">\r\n              <FormGroup className='d-flex mb-0'>\r\n                <Button.Ripple className='mr-1' color='primary' type='submit' onClick={ (e) => updateCategory(e) }>\r\n                  Submit\r\n\r\n                </Button.Ripple>\r\n                {/* spinner */ }\r\n                { success ? <Spinner color='primary' /> : null }\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\nexport default CategoryForm\r\n","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    //baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    baseURL: `https://nanybackend.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) ","//const baseURL = \"http://localhost:4000/\"\r\n// const baseURL = \"http://3.94.191.228:4000/\"\r\nconst baseURL = `https://nanybackend.herokuapp.com/image/`\r\nexport default baseURL"],"sourceRoot":""}