{"version":3,"sources":["views/front-end/how-it-works/index.js","middleware/API.js","views/components/toastify/index.js","middleware/BaseURL.js"],"names":["WorkList","useState","work","setWork","heading","text","putText","setPutText","icon","setIcon","loading","setLoading","useEffect","fetchAboutData","a","Action","get","data","console","log","modal","setModal","toggleModalPrimary","id","evenOnChange","e","target","name","value","prev","getSingleData","res","newData","FormData","append","updateData","put","success","toast","title","setTimeout","error","responsive","map","index","src","baseURL","alt","height","width","className","color","size","caret","right","href","onClick","preventDefault","_id","isOpen","toggle","modalClassName","sm","for","type","onChange","files","tag","FormGroup","addonType","placeholder","axios","create","SuccessToast","props","role","ErrorToast"],"mappings":"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","file":"static/js/77.215b6ce1.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport '../../../@core/scss/react/libs/editor/editor.scss'\r\nimport { MoreVertical, Edit, Trash, User } from 'react-feather'\r\nimport { FaTextWidth } from 'react-icons/fa'\r\nimport Action from '../../../middleware/API'\r\nimport baseURL from '../../../middleware/BaseURL'\r\n//import toast types from components \r\nimport { SuccessToast, ErrorToast } from '../../components/toastify'\r\n//import toasts from react\r\nimport { toast } from 'react-toastify'\r\nimport { Card, CustomInput, Spinner, Form, Row, Col, Label, InputGroup, FormGroup, InputGroupAddon, InputGroupText, Input, CardTitle, CardBody, Table, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, Button } from 'reactstrap'\r\n\r\nconst WorkList = () => {\r\n\r\n  //GET DATA\r\n  const [work, setWork] = useState([])\r\n  //update data\r\n  const [putText, setPutText] = useState({\r\n    heading: '',\r\n    text: ''\r\n  })\r\n  const [icon, setIcon] = useState(null)\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  //get api\r\n  useEffect(async () => {\r\n\r\n    async function fetchAboutData() {\r\n      try {\r\n        const { data } = await Action.get('/work', {})\r\n        setWork(data.data)\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n\r\n    }\r\n    fetchAboutData()\r\n  }, [work])\r\n\r\n  const [modal, setModal] = useState(null)\r\n  const toggleModalPrimary = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n  //event onChange \r\n  const evenOnChange = (e) => {\r\n    const { name, value } = e.target\r\n    setPutText((prev) => {\r\n      return ({\r\n        ...prev,\r\n        [name]: value\r\n      })\r\n    })\r\n  }\r\n  //get single data \r\n  const getSingleData = async (id) => {\r\n    try {\r\n      const { data } = await Action.get(`/work?_id=${ id }`)\r\n      const res = data.data[0]\r\n      setPutText({\r\n        heading: res.heading,\r\n        text: res.text\r\n      })\r\n      setIcon(res.icon)\r\n      console.log(res.icon)\r\n\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n\r\n  }\r\n\r\n  //upadte api\r\n  const newData = new FormData()\r\n  newData.append('heading', putText.heading)\r\n  newData.append('text', putText.text)\r\n  newData.append('file', icon)\r\n\r\n  const updateData = async (id) => {\r\n    const res = await Action.put(`/work/${ id }`, newData, {})\r\n    console.log(res)\r\n    if (res.data.success) {\r\n      setLoading(true)\r\n      toast.success(<SuccessToast title=\"Success\" text=\"Section updated Successfully!\" />)\r\n      setTimeout(() => {\r\n        setModal(null)\r\n        setLoading(null)\r\n      }, 1000)\r\n\r\n    } else {\r\n      setLoading(false)\r\n      toast.error(<ErrorToast title=\"error\" text=\"Something went wrong, try again later\" />)\r\n    }\r\n\r\n  }\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle>All List</CardTitle>\r\n\r\n          <Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>Icon</th>\r\n                <th>Heading</th>\r\n                <th>Text</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                work.map((value, index) => {\r\n                  return (\r\n                    <tr key={ index }>\r\n                      <td>\r\n                        <img src={ baseURL + value.icon } alt=\"\" height=\"50\" width=\"50\" />\r\n                      </td>\r\n                      <td> { value.heading } </td>\r\n                      <td>\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\r\n                            <MoreVertical size={ 15 } />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem href=\"/\" onClick={ (e) => {\r\n                              e.preventDefault()\r\n                              getSingleData(value._id)\r\n                              toggleModalPrimary(value._id)\r\n                            } }>\r\n                              <Edit className='mr-50' size={ 15 } /> <span className='align-middle'>Edit</span>\r\n                            </DropdownItem>\r\n\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                        {/* edit modal */ }\r\n                        <Modal\r\n                          isOpen={ modal === value._id }\r\n                          toggle={ () => toggleModalPrimary(value._id) }\r\n                          className='modal-dialog-centered'\r\n                          modalClassName=\"modal-primary\"\r\n                          key={ value._id }>\r\n                          <ModalHeader toggle={ () => toggleModalPrimary(value._id) }>Edit</ModalHeader>\r\n                          <ModalBody>\r\n                            <Form>\r\n                              <Row>\r\n                                <Col sm='12'>\r\n                                  <FormGroup>\r\n                                    <Label for='icon'>Upload Icon</Label>\r\n                                    <CustomInput type='file' id='icon' onChange={ (e) => setIcon(e.target.files[0]) } name='customFile' />\r\n                                  </FormGroup>\r\n\r\n                                </Col>\r\n\r\n                                <Col sm=\"12\">\r\n                                  {/* how it works form */ }\r\n                                  <Label for='icon-heading'>Icon Heading</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <FaTextWidth size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' onChange={ evenOnChange } name=\"heading\" value={ putText.heading } id='icon-heading' placeholder='Enter your Heading'\r\n                                    />\r\n                                  </InputGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"12\">\r\n                                  {/* how it works form */ }\r\n                                  <Label for='icon-text'>Icon Text</Label>\r\n                                  <InputGroup className='input-group-merge' tag={ FormGroup }>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                      <InputGroupText>\r\n                                        <FaTextWidth size={ 15 } />\r\n                                      </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input type='text' onChange={ evenOnChange } name=\"text\" value={ putText.text } id='icon-text' placeholder='Enter your Text' />\r\n                                  </InputGroup>\r\n                                </Col>\r\n                              </Row>\r\n                            </Form>\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                            <Button color=\"primary\" onClick={ () => updateData(value._id) }>\r\n                              Submit\r\n                            </Button>\r\n                            { loading ? <Spinner color='primary' /> : null }\r\n                          </ModalFooter>\r\n                        </Modal>\r\n\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                })\r\n              }\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  )\r\n}\r\nexport default WorkList","\r\nimport axios from 'axios'\r\n\r\nexport default axios.create({\r\n    //baseURL: `http://localhost:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    // baseURL: `http://3.94.191.228:4000`\r\n    baseURL: `https://nanybackend.herokuapp.com`\r\n})","import { Fragment } from 'react'\nimport { toast } from 'react-toastify'\nimport Avatar from '@components/avatar'\nimport {Check, X, AlertTriangle, Info } from 'react-feather'\n\n//toast success\nexport const SuccessToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Check size={12} />} />\n        <h6 className='toast-title'>Success!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast error\nexport const ErrorToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='danger' icon={<X size={12} />} />\n        <h6 className='toast-title'>Error!</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast warning\nexport const WarningToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='warning' icon={<AlertTriangle size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n)\n\n//toast info\nexport const InfoToast = (props) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='info' icon={<Info size={12} />} />\n        <h6 className='toast-title'>{props.title}</h6>\n      </div>\n      {/* <small className='text-muted'>11 Min Ago</small> */}\n    </div>\n    <div className='toastify-body'>\n      <span role='img' aria-label='toast-text'>\n        {props.text}\n      </span>\n    </div>\n  </Fragment>\n) ","//const baseURL = \"http://localhost:4000/\"\r\n// const baseURL = \"http://3.94.191.228:4000/\"\r\nconst baseURL = `https://nanybackend.herokuapp.com/image/`\r\nexport default baseURL"],"sourceRoot":""}