{"version":3,"sources":["assets/images/backgrounds/Marketing.png","views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js","assets/images/logo/logo-m.png"],"names":["ToastContent","name","role","className","size","color","icon","Login","props","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","useForm","register","errors","handleSubmit","illustration","require","default","Row","Col","lg","sm","src","Logo","alt","width","height","md","CardTitle","tag","CardText","Form","onSubmit","data","isObjEmpty","useJwt","login","then","res","userData","accessToken","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","success","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","FormGroup","Label","for","Input","autoFocus","type","value","id","placeholder","onChange","e","target","classnames","innerRef","required","validate","CustomInput","label","to","Button","Ripple","block","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","onClick","renderIcon","defaultProps"],"mappings":"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","file":"static/js/188.8c5f7be0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Marketing.e4142131.png\";","import { useState, useContext, Fragment } from 'react'\nimport classnames from 'classnames'\nimport Avatar from '@components/avatar'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\nimport Logo from '../../../../src/assets/images/logo/logo-m.png'\nimport LoginBg from '@src/assets/images/backgrounds/Marketing.png'\nimport {\n  Alert,\n  Row,\n  Col,\n  CardTitle,\n  CardText,\n  Form,\n  Input,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  Spinner\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Vuexy. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('admin@demo.com')\n  const [password, setPassword] = useState('admin')\n\n  const { register, errors, handleSubmit } = useForm()\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n    if (isObjEmpty(errors)) {\n      useJwt\n        .login({ email, password })\n        .then(res => {\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n          dispatch(handleLogin(data))\n          ability.update(res.data.userData.ability)\n          history.push(getHomeRouteForLoggedInUser(data.role))\n          toast.success(\n            <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n            { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n          )\n        })\n        .catch(err => console.log(err))\n    }\n  }\n  return (\n        <div className='auth-wrapper auth-v2'>\n    <Row className='auth-inner m-0'>\n    {/* <Link className='brand-logo lg:hidden' to='/' onClick={e => e.preventDefault()}>\n      <img src={Logo} width=\"100\" height=\"120\" alt=\"\"/>\n    </Link> */}\n    <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n      <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n        <img className='img-fluid' src={Logo} alt='Login' width=\"400\" height=\"400\" />\n      </div>\n    </Col>\n    <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n      <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n        <CardTitle tag='h2' className='font-weight-bold mb-1'>\n          Welcome to Admin!\n        </CardTitle>\n        <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Input\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['login-email'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <InputPasswordToggle\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['login-password'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n            \n              <FormGroup className=\"d-flex\">\n                <CustomInput type='checkbox' className='custom-control-Primary mr-80' id='remember-me' label='Remember Me' />\n               <div className=\"ml-auto\">\n               <Link to='/forgot-password'>\n                    <small className=\"text-right\">Forgot Password?</small>\n                </Link>\n               </div>\n              </FormGroup>\n           \n              <Button.Ripple type='submit' color='primary' block>\n                Sign in \n                {/* spinner */}\n                {/* <Spinner color='light' /> */}\n              </Button.Ripple>\n          \n              \n            </Form>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n           \n\nexport default Login\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-m.00b00a9d.png\";"],"sourceRoot":""}