{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js","assets/images/logo/logo-m.png"],"names":["ToastContent","name","role","className","size","color","icon","Login","props","useSkin","skin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","useForm","register","errors","handleSubmit","illustration","source","require","default","to","onClick","e","preventDefault","src","Logo","width","height","alt","lg","sm","md","tag","onSubmit","data","isObjEmpty","useJwt","login","then","res","userData","accessToken","refreshToken","handleLogin","update","push","getHomeRouteForLoggedInUser","toast","success","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","console","log","for","autoFocus","type","value","id","placeholder","onChange","target","classnames","innerRef","required","validate","label","Ripple","block","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","renderIcon","defaultProps"],"mappings":"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","file":"static/js/184.f49ffcb1.chunk.js","sourcesContent":["import { useState, useContext, Fragment } from 'react'\nimport classnames from 'classnames'\nimport Avatar from '@components/avatar'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser, isObjEmpty } from '@utils'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\nimport Logo from '../../../../src/assets/images/logo/logo-m.png'\nimport LoginBg from '@src/assets/images/pages/login-bg.jpeg'\nimport {\n  Alert,\n  Row,\n  Col,\n  CardTitle,\n  CardText,\n  Form,\n  Input,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  UncontrolledTooltip\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Vuexy. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('admin@demo.com')\n  const [password, setPassword] = useState('admin')\n\n  const { register, errors, handleSubmit } = useForm()\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n    if (isObjEmpty(errors)) {\n      useJwt\n        .login({ email, password })\n        .then(res => {\n          const data = { ...res.data.userData, accessToken: res.data.accessToken, refreshToken: res.data.refreshToken }\n          dispatch(handleLogin(data))\n          ability.update(res.data.userData.ability)\n          history.push(getHomeRouteForLoggedInUser(data.role))\n          toast.success(\n            <ToastContent name={data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n            { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n          )\n        })\n        .catch(err => console.log(err))\n    }\n  }\n  return (\n        <div className='auth-wrapper auth-v2'>\n    <Row className='auth-inner m-0'>\n    <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n      <img src={Logo} width=\"100\" height=\"120\" alt=\"\"/>\n    </Link>\n    <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n      <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n        <img className='img-fluid' src={source} alt='Login V2' />\n      </div>\n    </Col>\n    <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n      <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n        <CardTitle tag='h2' className='font-weight-bold mb-1'>\n          Welcome to Admin!\n        </CardTitle>\n        <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Input\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['login-email'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                </div>\n                <InputPasswordToggle\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['login-password'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n            \n              <FormGroup className=\"d-flex\">\n                <CustomInput type='checkbox' className='custom-control-Primary mr-80' id='remember-me' label='Remember Me' />\n               <div className=\"ml-auto\">\n               <Link to='/forgot-password'>\n                    <small className=\"text-right\">Forgot Password?</small>\n                </Link>\n               </div>\n              </FormGroup>\n           \n              <Button.Ripple type='submit' color='primary' block>\n                Sign in\n              </Button.Ripple>\n          \n              \n            </Form>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n           \n\nexport default Login\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-m.00b00a9d.png\";"],"sourceRoot":""}