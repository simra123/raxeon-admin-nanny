{"version":3,"sources":["views/pages/account-settings/Tabs.js","views/pages/account-settings/GeneralTabContent.js","views/pages/account-settings/PasswordTabContent.js","views/pages/account-settings/index.js","@core/components/input-password-toggle/index.js","@core/components/breadcrumbs/index.js"],"names":["Tabs","activeTab","toggleTab","Nav","className","pills","vertical","NavItem","NavLink","active","onClick","size","GeneralTabs","data","useForm","register","errors","handleSubmit","control","setValue","trigger","useState","avatar","setAvatar","Media","left","object","src","alt","height","width","body","Button","Ripple","tag","Label","color","Input","type","onChange","e","reader","FileReader","files","target","onload","result","readAsDataURL","hidden","accept","Form","onSubmit","Row","Col","sm","FormGroup","for","defaultValue","fullName","as","id","name","placeholder","innerRef","required","value","classnames","email","outline","PasswordTabContent","SignupSchema","yup","shape","oneOf","resolver","yupResolver","label","htmlFor","AccountSettings","setActiveTab","setData","useEffect","axios","get","then","response","breadCrumbTitle","breadCrumbParent","breadCrumbActive","md","tab","Card","CardBody","TabContent","TabPane","tabId","GeneralTabContent","general","InputPasswordToggle","props","hideIcon","showIcon","visible","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","renderIcon","defaultProps","BreadCrumbs","breadCrumbParent2","breadCrumbParent3","to"],"mappings":"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","file":"static/js/56.c4c61b29.chunk.js","sourcesContent":["import { Nav, NavItem, NavLink } from 'reactstrap'\r\nimport { User, Lock} from 'react-feather'\r\n\r\nconst Tabs = ({ activeTab, toggleTab }) => {\r\n  return (\r\n    <Nav className='nav-left' pills vertical>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '1'} onClick={() => toggleTab('1')}>\r\n          <User size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Profile</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '2'} onClick={() => toggleTab('2')}>\r\n          <Lock size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Change Password</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      {/* <NavItem>\r\n        <NavLink active={activeTab === '3'} onClick={() => toggleTab('3')}>\r\n          <Info size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Information</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '4'} onClick={() => toggleTab('4')}>\r\n          <Link size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Social</span>\r\n        </NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink active={activeTab === '5'} onClick={() => toggleTab('5')}>\r\n          <Bell size={18} className='mr-1' />\r\n          <span className='font-weight-bold'>Notifications</span>\r\n        </NavLink>\r\n      </NavItem> */}\r\n    </Nav>\r\n  )\r\n}\r\n\r\nexport default Tabs\r\n","import { Fragment, useState } from 'react'\r\nimport classnames from 'classnames'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Button, Media, Label, Row, Col, Input, FormGroup, Alert, Form } from 'reactstrap'\r\n\r\nconst GeneralTabs = ({ data }) => {\r\n  const { register, errors, handleSubmit, control, setValue, trigger } = useForm()\r\n\r\n  const [avatar, setAvatar] = useState(data.avatar ? data.avatar : '')\r\n\r\n  const onChange = e => {\r\n    const reader = new FileReader(),\r\n      files = e.target.files\r\n    reader.onload = function () {\r\n      setAvatar(reader.result)\r\n    }\r\n    reader.readAsDataURL(files[0])\r\n  }\r\n\r\n  const onSubmit = data => trigger()\r\n\r\n  return (\r\n    <Fragment>\r\n      <Media>\r\n        <Media className='mr-25' left>\r\n          <Media object className='rounded mr-50' src={avatar} alt='Generic placeholder image' height='80' width='80' />\r\n        </Media>\r\n        <Media className='mt-75 ml-1' body>\r\n          <Button.Ripple tag={Label} className='mr-75' size='sm' color='primary'>\r\n            Upload\r\n            <Input type='file' onChange={onChange} hidden accept='image/*' />\r\n          </Button.Ripple>\r\n          {/* <Button.Ripple color='secondary' size='sm' outline>\r\n            Reset\r\n          </Button.Ripple> */}\r\n          <p>Allowed JPG, GIF or PNG. Max size of 800kB</p>\r\n        </Media>\r\n      </Media>\r\n      <Form className='mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          \r\n          <Col sm='12'>\r\n            <FormGroup>\r\n              <Label for='name'>Admin Name</Label>\r\n              <Controller\r\n                defaultValue={data.fullName}\r\n                control={control}\r\n                as={Input}\r\n                id='name'\r\n                name='fullName'\r\n                placeholder='Name'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('fullName', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.fullName\r\n                })}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm='12'>\r\n            <FormGroup>\r\n              <Label for='email'>Email</Label>\r\n              <Controller\r\n                defaultValue={data.email}\r\n                control={control}\r\n                as={Input}\r\n                type='email'\r\n                id='email'\r\n                name='email'\r\n                placeholder='Email'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('email', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.email\r\n                })}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          {/* <Col sm='6'>\r\n            <FormGroup>\r\n              <Label for='company'>Company</Label>\r\n              <Controller\r\n                defaultValue={data.company}\r\n                control={control}\r\n                as={Input}\r\n                id='company'\r\n                name='company'\r\n                placeholder='Company Name'\r\n                innerRef={register({ required: true })}\r\n                onChange={e => setValue('company', e.target.value)}\r\n                className={classnames({\r\n                  'is-invalid': errors.company\r\n                })}\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col className='mt-75' sm='12'>\r\n            <Alert className='mb-50' color='warning'>\r\n              <h4 className='alert-heading'>Your email is not confirmed. Please check your inbox.</h4>\r\n              <div className='alert-body'>\r\n                <a href='/' className='alert-link' onClick={e => e.preventDefault()}>\r\n                  Resend confirmation\r\n                </a>\r\n              </div>\r\n            </Alert>\r\n          </Col> */}\r\n          <Col className='mt-2' sm='12'>\r\n            <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n              Save changes\r\n            </Button.Ripple>\r\n            <Button.Ripple color='secondary' outline>\r\n              Cancel\r\n            </Button.Ripple>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default GeneralTabs\r\n","import * as yup from 'yup'\r\nimport classnames from 'classnames'\r\nimport { useForm } from 'react-hook-form'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Form, FormGroup, Row, Col, Button } from 'reactstrap'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\nconst PasswordTabContent = () => {\r\n  const SignupSchema = yup.object().shape({\r\n    'old-password': yup.string().required(),\r\n    'new-password': yup.string().required(),\r\n    'retype-new-password': yup\r\n      .string()\r\n      .required()\r\n      .oneOf([yup.ref(`new-password`), null], 'Passwords must match')\r\n  })\r\n\r\n  const { register, errors, handleSubmit, trigger } = useForm({\r\n    resolver: yupResolver(SignupSchema)\r\n  })\r\n\r\n  const onSubmit = () => trigger()\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(onSubmit)}>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='Current Password'\r\n              htmlFor='old-password'\r\n              name='old-password'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['old-password']\r\n              })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='New Password'\r\n              htmlFor='new-password'\r\n              name='new-password'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['new-password']\r\n              })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n        <Col sm='6'>\r\n          <FormGroup>\r\n            <InputPasswordToggle\r\n              label='Confirm Password'\r\n              htmlFor='retype-new-password'\r\n              name='retype-new-password'\r\n              innerRef={register({ required: true })}\r\n              className={classnames('input-group-merge', {\r\n                'is-invalid': errors['retype-new-password']\r\n              })}\r\n            />\r\n          </FormGroup>\r\n        </Col>\r\n        <Col className='mt-1' sm='12'>\r\n          <Button.Ripple type='submit' className='mr-1' color='primary'>\r\n            Save changes\r\n          </Button.Ripple>\r\n          <Button.Ripple color='secondary' outline>\r\n            Cancel\r\n          </Button.Ripple>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default PasswordTabContent","import { Fragment, useState, useEffect } from 'react'\nimport Tabs from './Tabs'\nimport axios from 'axios'\nimport InfoTabContent from './InfoTabContent'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport SocialTabContent from './SocialTabContent'\nimport GeneralTabContent from './GeneralTabContent'\nimport PasswordTabContent from './PasswordTabContent'\nimport NotificationsTabContent from './NotificationsTabContent'\nimport { Row, Col, TabContent, TabPane, Card, CardBody } from 'reactstrap'\n\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/pages/page-account-settings.scss'\n\nconst AccountSettings = () => {\n  const [activeTab, setActiveTab] = useState('1'),\n    [data, setData] = useState(null)\n\n  const toggleTab = tab => {\n    setActiveTab(tab)\n  }\n\n  useEffect(() => {\n    axios.get('/account-setting/data').then(response => setData(response.data))\n  }, [])\n\n  return (\n    <Fragment>\n      <Breadcrumbs breadCrumbTitle='Account Settings' breadCrumbParent='Pages' breadCrumbActive='Account Settings' />\n      {data !== null ? (\n        <Row>\n          <Col className='mb-2 mb-md-0' md='3'>\n            <Tabs activeTab={activeTab} toggleTab={toggleTab} />\n          </Col>\n          <Col md='9'>\n            <Card>\n              <CardBody>\n                <TabContent activeTab={activeTab}>\n                  <TabPane tabId='1'>\n                    <GeneralTabContent data={data.general} />\n                  </TabPane>\n                  <TabPane tabId='2'>\n                    <PasswordTabContent />\n                 </TabPane>\n                 {/*  <TabPane tabId='3'>\n                    <InfoTabContent data={data.info} />\n                  </TabPane>\n                  <TabPane tabId='4'>\n                    <SocialTabContent data={data.social} />\n                  </TabPane>\n                  <TabPane tabId='5'>\n                    <NotificationsTabContent data={data.notification} />\n                  </TabPane> */}\n                </TabContent>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      ) : null}\n    </Fragment>\n  )\n}\n\nexport default AccountSettings\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = props => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className\r\n        })}\r\n      >\r\n        <Input\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\r\n        </InputGroupAddon>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName, componentName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName, componentName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem tag='li' className='text-primary'>\n                  {breadCrumbParent}\n                </BreadcrumbItem>\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\n        <div className='form-group breadcrum-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' right>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <CheckSquare className='mr-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='mr-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='mr-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='mr-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>*/}\n    </div> \n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n"],"sourceRoot":""}